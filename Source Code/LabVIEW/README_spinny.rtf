{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12540\viewh16140\viewkind1\viewscale110
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri0

\f0\fs24 \cf0 Spinny\
\
Labview application to drive camera rotator and acquire images.\
\
JMR 6/2014\
updated 8/2014\
updated 10/2014\
updated 01/2015\
\
Rotator Hardware: \
\
The rotator is driven by a stepper motor (17HS16-0284S). The motor connects to a bipolar stepper motor driver (ST-6128) via 4 wires (A+/A-/B+/B-). The setting of the driver: current=0.25,   microstep=1 (full step driving mode). An individual 12V/1A DC power supply provides the power to the motor driver. The digital interface of the driver is a standard common anode single pulse interface (optically isolated). The digital (TTL) signals that drive the motor are generated by an arduino microcontroller. The arduino board connects to the driver via a logic invertor (74LS04) for the common anode interface. The plus ends of each signal (PUL+,DIR+,ENA+) are connected to the 5V power on the ardunio board. The PUL-/DIR-/ENA- are 3 digital inputs. PUL- is the step pulse input, falling-edge triggered. DIR- controls the direction, HIGH=CW, LOW=CCW. ENA- is the \'93Enable\'94 signal, controls the on/off of the motor, active-high. The pulse signal from ardunio pin2 is inverted by 74LS04, connected to PUL-. The direction signal from ardunio pin3 is inverted, connected to DIR-. The Enable signal from ardunio pin4 is non-inverted (inverted twice by 74LS04 to drive the optical isolator), connected to the ENA-. The pin5 on ardunio generates the trigger signal for Dalsa cameras, and connects to a BNC connector which is fixed on the side of the box. The max tested pulse rate at 12V/250mA is 700Hz, for stability, the speed in the Labview is set as 600Hz. There are 416.666 steps per degree, in the labview, a integer of 417 was used, with an negligible error of +0.08%(+0.288\'b0 per 360\'b0). The arduino is connected to the computer with a standard USB cable.\
\
\
Camera Hardware: \
\
The current camera is a Dalsa Genie HM640 8 bit monochrome digital camera. It uses the GigE Vision interface. The camera\'92s data connection to the computer is a 4-twisted-pair ethernet cable. The computer should have a dedicated intel Pro/1000 NIC in a PCIe slot. There is also a round Hirose connector for power (pins 1 (-)  and 2 (+) ) and TTL trigger signal (pins 5 (-) and 6 (+) ).  The trigger signal originates from pin 5 on the arduino. Power is 12 VDC at least 600 mA.\
\
Camera Cable:\
\
The cable is 6-twisted-pair (24 gauge) flexible. 4 pairs carry the gigE Vision data. One pair carries the trigger signal, and the last pair carries power (12 VDC at least 600 mA for the camera and another 600 mA for the accessories (electroluminescent backdrop(600mA)/red headlight(400mA)/laser pointer(<20mA)). Because backdrop and headlight do not work at same time, 600mA is enough. Power and trigger go to the hirose connector. A short cable comes out of the back of the hirose for accessories power (red and black pin plug). All accessories have their own power regulator, no additional regulator needed. \
\
Power is in the red(+)/blue(-) pair.\
\
Trigger is in the purple(+)/black(-) pair.\
\
Data is in the remaining pairs. The connectors are RJ45 for Cat6 cable. Looking at the business end of the connector with the tab down, the order of wires is \
\
brown / white\
gray-pink striped / pink\
gray / red-blue stripe\
green / yellow\
\
Arduino Software: \
\
The arduino driver software and IDE must be installed. The software interface between Labview and the arduino is a modified version of LIFA (Labview Interface For Arduino). The labview interface has been modified to implement additional commands for motor/camera control and to generate camera trigger signals at configurable step intervals. Search for \'93jmr\'94 to see modifications. After plugging in the arduino, but before using the spinny labview application, open LIFA_BaseWithLocalMods in the arduino IDE and download the software to the arduino. \
\
LabVIEW Environment:\
\
NI-IMAQdx is needed for camera communication. This is part of NI Vision Acquisition Software. The LavVIEW interface for arduino (LIFA) toolkit must also be installed.   The camera can be configured (e.g., field of view) using the MAX program.\
\
Spinny Usage:\
\
Before starting the VI, select the camera (If a camera is connected it should be visible in the camera pull-down). \
\
When the VI is running, its current position (in degrees) is displayed. \
\
The HOME button sets the position to 0. \
\
On startup, the Camera Mode is \'93none.\'94 Selecting \'93live\'94 will play live images in the window. This can be used for aiming and focusing. \
\
To move the camera, select either an angle to move *to* or an angle to move *for* and press the corresponding button.  A single camera movement is limited to 360 degrees. To minimize jerking, motor speed will gradually increase from 0 to top speed and also decelerate from top speed to 0 at the end of motion. Maximum speed and acceleration rate are currently hardcoded.\
\
If camera mode is \'93live\'94 images will continue to be displayed.\
\
When the camera is moving, the only active control is STOP, which will abort the move without losing the current position. However, if the camera has crashed into something solid, it is possible that the stepper motor has lost steps, and the position may not be accurate. In this case, move the arm (using the motor or manual knob) to a physically verifiable 0 position and re-HOME.\
\
If the camera mode is \'93triggered,\'94 images will be snapped at the specified angular increment. The images will be displayed in the window and also saved to the specified folder. A new folder must be used for each acquisition unless you intend to overwrite. Images in the folder will be sequentially numbered starting from _000 with the same root name as the folder. A text file will be written to the folder that lists the beginning and ending angles of the acquisition, the angular increment, and the direction of rotation. Also, a text file will be generated for each image that indicates the angular position at which the image was saved (which may be slightly different than the angle at which it was acquired). NOTE: an image will be acquired for the starting position and the ending position. Thus, for a 360 degree movement, the first and last images will be from the same position.\
\
\
}